{"version":3,"sources":["profile.js","App.js","serviceWorker.js","index.js"],"names":["Profile","indexValue","this","props","location","data","id","specificProfile","Data","profiles","react_default","a","createElement","basicInfo","Name","React","Component","Home","info","className","map","i","index","key","class","Role","href","Email","Mobile","react_router_dom","to","pathname","App","react_router","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAgBeA,mLATf,IAAIC,EAAWC,KAAKC,MAAMC,SAASC,KAAKC,GACpCC,EAAgBC,EAAKC,SAASR,GAClC,OACAS,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKL,EAAgBM,UAAUC,KAA/B,aANsBC,IAAMC,WCUxBC,EAAK,WACT,IAAIC,EAAKV,EAAKC,SACZ,OACEC,EAAAC,EAAAC,cAAA,WAASO,UAAU,UAClBD,EAAKE,IAAI,SAACC,EAAEC,GAAH,OACRZ,EAAAC,EAAAC,cAAA,WAASW,IAAKD,EAAOH,UAAU,SAC7BT,EAAAC,EAAAC,cAAA,UAAKS,EAAER,UAAUC,MACjBJ,EAAAC,EAAAC,cAAA,MAAIY,MAAM,MAAMH,EAAER,UAAUY,MAC5Bf,EAAAC,EAAAC,cAAA,KAAGc,KAAM,UAAUL,EAAER,UAAUc,OAAQN,EAAER,UAAUc,OAAUjB,EAAAC,EAAAC,cAAA,WAC7DF,EAAAC,EAAAC,cAAA,KAAGc,KAAM,OAAOL,EAAER,UAAUe,QAASP,EAAER,UAAUe,QAAWlB,EAAAC,EAAAC,cAAA,WAC5DF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAI,CAACC,SAAS,WAAW1B,KAAK,CAACC,GAAGgB,KAAxC,uBAMOU,EAzBP,WACR,OACAtB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACAnB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjCP,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWpC,MCEpBqC,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OACPhC,EAAAC,EAAAC,cAACF,EAAAC,EAAMgC,WAAP,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.8cdd701a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Data from './data/data.json';\r\n\r\n\r\nclass Profile extends React.Component{\r\nrender(){\r\nvar indexValue=this.props.location.data.id;\r\nvar specificProfile=Data.profiles[indexValue];\r\nreturn(\r\n<div>\r\n<h2>{specificProfile.basicInfo.Name} </h2>\r\n</div>)\r\n}\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\n\r\n// export default class App extends React.Component{\r\n//   render(){\r\n//     var styles={\r\n//         background:\"blue\",\r\n//         color:\"#fff\",\r\n//         padding:\"1%\"\r\n//     }\r\n//     let array=[\"jagan\",\"ramu\",\"krishnaveni\",\"sj\"];\r\n//     let array1=[\"ramu\",\"krishnaveni\",\"jagan\",\"RJ\"]\r\n//     return(\r\n//       <div className='App'>\r\n//         <h2 class=\"h5\" style={styles}>Jagan Saragdan</h2>\r\n//         {array.map((i,index)=>(\r\n//           <Profile name={array[index]} bestfriend={array1[index]} key={index}/>\r\n//         ))\r\n//         }\r\n//       </div>\r\n//       );\r\n//   }\r\n//}\r\n","import React from 'react';\nimport './App.css';\nimport Data from './data/data.json';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport Profile from './profile';\n\nvar App=()=>{\nreturn(\n<BrowserRouter>\n<Route exact path=\"/\" component={Home} />\n<Route exact path=\"/Profile\" component={Profile} />\n</BrowserRouter>\n);\n}\n\nlet Home=()=>{\nvar info=Data.profiles;\n  return(\n    <section className=\"parent\">\n    {info.map((i,index)=>(\n      <article key={index} className=\"child\">\n        <h2>{i.basicInfo.Name}</h2>\n        <h2 class=\"h3\">{i.basicInfo.Role}</h2>\n        <a href={\"mailto:\"+i.basicInfo.Email}>{i.basicInfo.Email}</a><br/>\n        <a href={\"tel:\"+i.basicInfo.Mobile}>{i.basicInfo.Mobile}</a><br/>\n        <Link to={{pathname:\"/profile\",data:{id:index}}}>Viewprofile >></Link>\n      </article>\n      ))\n    }\n    </section>);\n}\nexport default App;\n//tell for mobile users\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}